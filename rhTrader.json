{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import robin_stocks as r\n",
    "import sys\n",
    "import config\n",
    "import datetime as dt\n",
    "import time\n",
    "import pyotp\n",
    "import pandas as pd\n",
    "import yfinance as y\n",
    "import ta\n",
    "import warnings\n",
    "import pytz\n",
    "# import ta\n",
    "from pandas_datareader import data as web\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Login\n",
    "login = loginer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functions\n",
    "def get_stocks():\n",
    "    stocks = list()\n",
    "    stocks.append('PLTR')\n",
    "    stocks.append('NIO')\n",
    "    stocks.append('AAPL')\n",
    "    return (stocks)\n",
    "\n",
    "def quote(ticker):\n",
    "    ro = r.get_latest_price(ticker)\n",
    "    print(ticker.upper() + \": $\" + str(ro[0]))\n",
    "\n",
    "def buy_exact(ticker, amount):\n",
    "    ro = r.order_buy_market(ticker, amount)\n",
    "    print(ro)\n",
    "\n",
    "def sell_exact(ticker, amount):\n",
    "    ro = r.order_sell_market(ticker, amount)\n",
    "    print(ro)\n",
    "\n",
    "def open_market():\n",
    "    market = False\n",
    "    tz = pytz.timezone('America/Los_Angeles')\n",
    "    time_now = dt.datetime.now(tz).time()\n",
    "    \n",
    "    market_open = dt.time(6,0,0)\n",
    "    market_close = dt.time(13,29,0)\n",
    "    \n",
    "    if time_now > market_open and time_now < market_close:\n",
    "        market = True\n",
    "    else:\n",
    "        pass\n",
    "    return market\n",
    "\n",
    "def latest_price(name):\n",
    "    return r.stocks.get_latest_price(name)[0]\n",
    "\n",
    "# Returns a dataframe of options available from the start day to\n",
    "# end day\n",
    "def options_within_days(options, start, end):\n",
    "    tz = pytz.timezone('America/Los_Angeles')\n",
    "    time_now = dt.datetime.now(tz).time()\n",
    "    start_date = (dt.datetime.combine(dt.date(2021,1,1),time_now)+dt.timedelta(start))\n",
    "    end_date = (dt.datetime.combine(dt.date(2021,1,1),time_now)+dt.timedelta(end))\n",
    "    dates = [start_date + dt.timedelta(days=x) for x in range(0, (end_date-start_date).days)]\n",
    "    list_of_dates = []\n",
    "    for d in dates:\n",
    "        list_of_dates.append(d.strftime(\"%Y-%m-%d\"))\n",
    "    new_df = df[df['expiration_date'].isin(list_of_dates)].reset_index(drop=True)\n",
    "    return new_df\n",
    "\n",
    "# Gets the options for a range of days, start from 0 if you want the immediate result\n",
    "# result\n",
    "def get_option(name, start, end):\n",
    "    data = r.options.find_tradable_options(name)\n",
    "    df = pd.DataFrame(data)\n",
    "    return options_within_days(df, start, end)\n",
    "\n",
    "# Returns a dataframe of all the stocks history from yahoo finance API\n",
    "# It takes a start and end date which lets you select the interval you want\n",
    "# the information from\n",
    "# Its result are daily and the prices shown are during the market hours\n",
    "def history(inp,start,end):\n",
    "    return y.download(inp, start=start, end=end, group_by='tickers')\n",
    "\n",
    "# Returns the most available detialed information of the last 59 days in\n",
    "# a dataframe\n",
    "def history_last_sixty(inp):\n",
    "    current_frames = []\n",
    "    for i in inp:\n",
    "        tick = y.Ticker(i)\n",
    "        df = tick.history(period='59d', interval='15m')\n",
    "        \n",
    "        # Might wanna bring these lines back\n",
    "#         df['name'] = [i] * len(df)\n",
    "#         cols = df.columns.tolist()\n",
    "#         cols = cols[-1:] + cols[:-1]\n",
    "        current_frames.append(df)\n",
    "    temp = pd.concat(current_frames, axis=1, keys=inp)\n",
    "    return temp\n",
    "\n",
    "# Logins, use your username and password, in future will try to make this\n",
    "# a file processing function\n",
    "def loginer():\n",
    "    totp  = pyotp.TOTP(\"My2factorAppHere\").now()\n",
    "    login = r.login('YOURUSERNAME', 'YOURPASSWORD', mfa_code=totp)\n",
    "    return login"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"7\" halign=\"left\">PLTR</th>\n",
       "      <th colspan=\"7\" halign=\"left\">NIO</th>\n",
       "      <th colspan=\"7\" halign=\"left\">AAPL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>...</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-10-06 09:30:00-04:00</th>\n",
       "      <td>9.040100</td>\n",
       "      <td>9.045300</td>\n",
       "      <td>8.900000</td>\n",
       "      <td>8.950000</td>\n",
       "      <td>3698075</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21.709999</td>\n",
       "      <td>21.930000</td>\n",
       "      <td>21.260000</td>\n",
       "      <td>...</td>\n",
       "      <td>9472235</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.699997</td>\n",
       "      <td>116.120003</td>\n",
       "      <td>115.029999</td>\n",
       "      <td>115.180000</td>\n",
       "      <td>11257188</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-06 09:45:00-04:00</th>\n",
       "      <td>8.950000</td>\n",
       "      <td>9.020000</td>\n",
       "      <td>8.930000</td>\n",
       "      <td>8.995000</td>\n",
       "      <td>1185377</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21.330000</td>\n",
       "      <td>21.410000</td>\n",
       "      <td>21.209999</td>\n",
       "      <td>...</td>\n",
       "      <td>5013528</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.180000</td>\n",
       "      <td>115.214996</td>\n",
       "      <td>114.531601</td>\n",
       "      <td>114.910004</td>\n",
       "      <td>7482395</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-06 10:00:00-04:00</th>\n",
       "      <td>8.990000</td>\n",
       "      <td>9.050000</td>\n",
       "      <td>8.980000</td>\n",
       "      <td>9.025000</td>\n",
       "      <td>896766</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21.340000</td>\n",
       "      <td>21.430000</td>\n",
       "      <td>21.250000</td>\n",
       "      <td>...</td>\n",
       "      <td>2733631</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>114.907997</td>\n",
       "      <td>115.430000</td>\n",
       "      <td>114.860001</td>\n",
       "      <td>115.430000</td>\n",
       "      <td>5951458</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-06 10:15:00-04:00</th>\n",
       "      <td>9.055000</td>\n",
       "      <td>9.170000</td>\n",
       "      <td>9.040000</td>\n",
       "      <td>9.113700</td>\n",
       "      <td>2643784</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21.514999</td>\n",
       "      <td>21.638399</td>\n",
       "      <td>21.340000</td>\n",
       "      <td>...</td>\n",
       "      <td>4123259</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.209999</td>\n",
       "      <td>115.540001</td>\n",
       "      <td>115.004997</td>\n",
       "      <td>115.191902</td>\n",
       "      <td>5664288</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-06 10:30:00-04:00</th>\n",
       "      <td>9.116000</td>\n",
       "      <td>9.240000</td>\n",
       "      <td>9.110000</td>\n",
       "      <td>9.235000</td>\n",
       "      <td>1948985</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21.340700</td>\n",
       "      <td>21.480000</td>\n",
       "      <td>21.340099</td>\n",
       "      <td>...</td>\n",
       "      <td>1646640</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.209999</td>\n",
       "      <td>115.355003</td>\n",
       "      <td>114.559998</td>\n",
       "      <td>114.832703</td>\n",
       "      <td>4925338</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29 14:45:00-05:00</th>\n",
       "      <td>24.764999</td>\n",
       "      <td>24.870001</td>\n",
       "      <td>24.709999</td>\n",
       "      <td>24.735001</td>\n",
       "      <td>718320</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.226200</td>\n",
       "      <td>45.630001</td>\n",
       "      <td>45.150002</td>\n",
       "      <td>...</td>\n",
       "      <td>2811506</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135.514999</td>\n",
       "      <td>135.580002</td>\n",
       "      <td>135.130005</td>\n",
       "      <td>135.434998</td>\n",
       "      <td>3202568</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29 15:00:00-05:00</th>\n",
       "      <td>24.730000</td>\n",
       "      <td>24.740000</td>\n",
       "      <td>24.629999</td>\n",
       "      <td>24.690001</td>\n",
       "      <td>958686</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.610001</td>\n",
       "      <td>45.810001</td>\n",
       "      <td>45.520000</td>\n",
       "      <td>...</td>\n",
       "      <td>2547497</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135.434998</td>\n",
       "      <td>135.539993</td>\n",
       "      <td>135.149994</td>\n",
       "      <td>135.519897</td>\n",
       "      <td>2760782</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29 15:15:00-05:00</th>\n",
       "      <td>24.670000</td>\n",
       "      <td>24.730000</td>\n",
       "      <td>24.580000</td>\n",
       "      <td>24.690001</td>\n",
       "      <td>1502108</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.794998</td>\n",
       "      <td>45.930000</td>\n",
       "      <td>45.680000</td>\n",
       "      <td>...</td>\n",
       "      <td>2733215</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135.514999</td>\n",
       "      <td>135.669998</td>\n",
       "      <td>135.320007</td>\n",
       "      <td>135.367798</td>\n",
       "      <td>3087604</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29 15:30:00-05:00</th>\n",
       "      <td>24.680000</td>\n",
       "      <td>24.700001</td>\n",
       "      <td>24.580000</td>\n",
       "      <td>24.605000</td>\n",
       "      <td>1325415</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.819099</td>\n",
       "      <td>46.275002</td>\n",
       "      <td>45.814999</td>\n",
       "      <td>...</td>\n",
       "      <td>4670223</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135.369995</td>\n",
       "      <td>135.539993</td>\n",
       "      <td>135.175003</td>\n",
       "      <td>135.320007</td>\n",
       "      <td>2580595</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29 15:45:00-05:00</th>\n",
       "      <td>24.601101</td>\n",
       "      <td>24.700001</td>\n",
       "      <td>24.559999</td>\n",
       "      <td>24.650000</td>\n",
       "      <td>2722572</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46.266998</td>\n",
       "      <td>46.270000</td>\n",
       "      <td>45.919998</td>\n",
       "      <td>...</td>\n",
       "      <td>4638882</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135.330002</td>\n",
       "      <td>135.339996</td>\n",
       "      <td>134.340897</td>\n",
       "      <td>134.880005</td>\n",
       "      <td>8922749</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1512 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                PLTR                                   \\\n",
       "                                Open       High        Low      Close   \n",
       "Datetime                                                                \n",
       "2020-10-06 09:30:00-04:00   9.040100   9.045300   8.900000   8.950000   \n",
       "2020-10-06 09:45:00-04:00   8.950000   9.020000   8.930000   8.995000   \n",
       "2020-10-06 10:00:00-04:00   8.990000   9.050000   8.980000   9.025000   \n",
       "2020-10-06 10:15:00-04:00   9.055000   9.170000   9.040000   9.113700   \n",
       "2020-10-06 10:30:00-04:00   9.116000   9.240000   9.110000   9.235000   \n",
       "...                              ...        ...        ...        ...   \n",
       "2020-12-29 14:45:00-05:00  24.764999  24.870001  24.709999  24.735001   \n",
       "2020-12-29 15:00:00-05:00  24.730000  24.740000  24.629999  24.690001   \n",
       "2020-12-29 15:15:00-05:00  24.670000  24.730000  24.580000  24.690001   \n",
       "2020-12-29 15:30:00-05:00  24.680000  24.700001  24.580000  24.605000   \n",
       "2020-12-29 15:45:00-05:00  24.601101  24.700001  24.559999  24.650000   \n",
       "\n",
       "                                                                 NIO  \\\n",
       "                            Volume Dividends Stock Splits       Open   \n",
       "Datetime                                                               \n",
       "2020-10-06 09:30:00-04:00  3698075         0            0  21.709999   \n",
       "2020-10-06 09:45:00-04:00  1185377         0            0  21.330000   \n",
       "2020-10-06 10:00:00-04:00   896766         0            0  21.340000   \n",
       "2020-10-06 10:15:00-04:00  2643784         0            0  21.514999   \n",
       "2020-10-06 10:30:00-04:00  1948985         0            0  21.340700   \n",
       "...                            ...       ...          ...        ...   \n",
       "2020-12-29 14:45:00-05:00   718320         0            0  45.226200   \n",
       "2020-12-29 15:00:00-05:00   958686         0            0  45.610001   \n",
       "2020-12-29 15:15:00-05:00  1502108         0            0  45.794998   \n",
       "2020-12-29 15:30:00-05:00  1325415         0            0  45.819099   \n",
       "2020-12-29 15:45:00-05:00  2722572         0            0  46.266998   \n",
       "\n",
       "                                                 ...                     \\\n",
       "                                High        Low  ...   Volume Dividends   \n",
       "Datetime                                         ...                      \n",
       "2020-10-06 09:30:00-04:00  21.930000  21.260000  ...  9472235         0   \n",
       "2020-10-06 09:45:00-04:00  21.410000  21.209999  ...  5013528         0   \n",
       "2020-10-06 10:00:00-04:00  21.430000  21.250000  ...  2733631         0   \n",
       "2020-10-06 10:15:00-04:00  21.638399  21.340000  ...  4123259         0   \n",
       "2020-10-06 10:30:00-04:00  21.480000  21.340099  ...  1646640         0   \n",
       "...                              ...        ...  ...      ...       ...   \n",
       "2020-12-29 14:45:00-05:00  45.630001  45.150002  ...  2811506         0   \n",
       "2020-12-29 15:00:00-05:00  45.810001  45.520000  ...  2547497         0   \n",
       "2020-12-29 15:15:00-05:00  45.930000  45.680000  ...  2733215         0   \n",
       "2020-12-29 15:30:00-05:00  46.275002  45.814999  ...  4670223         0   \n",
       "2020-12-29 15:45:00-05:00  46.270000  45.919998  ...  4638882         0   \n",
       "\n",
       "                                              AAPL                          \\\n",
       "                          Stock Splits        Open        High         Low   \n",
       "Datetime                                                                     \n",
       "2020-10-06 09:30:00-04:00            0  115.699997  116.120003  115.029999   \n",
       "2020-10-06 09:45:00-04:00            0  115.180000  115.214996  114.531601   \n",
       "2020-10-06 10:00:00-04:00            0  114.907997  115.430000  114.860001   \n",
       "2020-10-06 10:15:00-04:00            0  115.209999  115.540001  115.004997   \n",
       "2020-10-06 10:30:00-04:00            0  115.209999  115.355003  114.559998   \n",
       "...                                ...         ...         ...         ...   \n",
       "2020-12-29 14:45:00-05:00            0  135.514999  135.580002  135.130005   \n",
       "2020-12-29 15:00:00-05:00            0  135.434998  135.539993  135.149994   \n",
       "2020-12-29 15:15:00-05:00            0  135.514999  135.669998  135.320007   \n",
       "2020-12-29 15:30:00-05:00            0  135.369995  135.539993  135.175003   \n",
       "2020-12-29 15:45:00-05:00            0  135.330002  135.339996  134.340897   \n",
       "\n",
       "                                                                        \n",
       "                                Close    Volume Dividends Stock Splits  \n",
       "Datetime                                                                \n",
       "2020-10-06 09:30:00-04:00  115.180000  11257188       0.0            0  \n",
       "2020-10-06 09:45:00-04:00  114.910004   7482395       0.0            0  \n",
       "2020-10-06 10:00:00-04:00  115.430000   5951458       0.0            0  \n",
       "2020-10-06 10:15:00-04:00  115.191902   5664288       0.0            0  \n",
       "2020-10-06 10:30:00-04:00  114.832703   4925338       0.0            0  \n",
       "...                               ...       ...       ...          ...  \n",
       "2020-12-29 14:45:00-05:00  135.434998   3202568       0.0            0  \n",
       "2020-12-29 15:00:00-05:00  135.519897   2760782       0.0            0  \n",
       "2020-12-29 15:15:00-05:00  135.367798   3087604       0.0            0  \n",
       "2020-12-29 15:30:00-05:00  135.320007   2580595       0.0            0  \n",
       "2020-12-29 15:45:00-05:00  134.880005   8922749       0.0            0  \n",
       "\n",
       "[1512 rows x 21 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tick = y.Ticker('pltr')\n",
    "# tick.history(period='59d', interval='15m')\n",
    "history_last_sixty(get_stocks())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Gets the price of the stock name using ticker\n",
    "# def quote(ticker):\n",
    "#     ro = r.get_latest_price(ticker)\n",
    "#     print(ticker.upper() + \": $\" + str(ro[0]))\n",
    "# def buy_exact(ticker, amount):\n",
    "#     ro = r.order_buy_market(ticker, amount)\n",
    "#     print(ro)\n",
    "# def sell_exact(ticker, amount):\n",
    "#     ro = r.order_sell_market(ticker, amount)\n",
    "#     print(ro)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GOOG: $1738.850000\n"
     ]
    }
   ],
   "source": [
    "quote('goog')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
